import type { APISchema } from "@/types/index.js";
import type * as Select from "$lib/bits/select/_types.js";
export declare const root: APISchema<Select.Props>;
export declare const trigger: APISchema<Select.TriggerProps>;
export declare const content: APISchema<Select.ContentProps>;
export declare const item: APISchema<Select.ItemProps>;
export declare const value: APISchema;
export declare const input: APISchema<Select.InputProps>;
export declare const group: APISchema<Select.GroupProps>;
export declare const label: APISchema<Select.LabelProps>;
export declare const separator: APISchema<Select.SeparatorProps>;
export declare const indicator: APISchema<Select.IndicatorProps>;
export declare const arrow: APISchema<Select.ArrowProps>;
export declare const select: (APISchema | APISchema<{
    disabled?: boolean | undefined;
    preventScroll?: boolean | undefined;
    closeOnEscape?: boolean | undefined;
    closeOnOutsideClick?: boolean | undefined;
    onOutsideClick?: ((event: PointerEvent) => void) | undefined;
    portal?: string | HTMLElement | null | undefined;
    required?: boolean | undefined;
    name?: string | undefined;
    loop?: boolean | undefined;
    typeahead?: boolean | undefined;
    scrollAlignment?: "center" | "nearest" | undefined;
    highlightOnHover?: boolean | undefined;
    selected?: import("../../lib/index.js").Selected<unknown> | undefined;
    onSelectedChange?: import("../../lib/internal/types.js").OnChangeFn<import("../../lib/index.js").Selected<unknown> | undefined> | undefined;
    open?: boolean | undefined;
    onOpenChange?: import("../../lib/internal/types.js").OnChangeFn<boolean> | undefined;
    multiple?: false | undefined;
    items?: import("../../lib/index.js").Selected<unknown>[] | undefined;
}> | APISchema<{
    asChild?: boolean | undefined;
    el?: HTMLButtonElement | undefined;
}>)[];
